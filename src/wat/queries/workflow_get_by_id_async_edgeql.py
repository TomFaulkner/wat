# AUTOGENERATED FROM 'queries/workflow_get_by_id.edgeql' WITH:
#     $ edgedb-py --target async


from __future__ import annotations

import dataclasses
import datetime
import uuid

import edgedb
import pydantic


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class WorkflowGetByIdResultFlowstate(NoPydanticValidation):
    id: uuid.UUID
    state: str
    created: datetime.datetime | None
    last_updated: datetime.datetime | None


@dataclasses.dataclass
class WorkflowGetByIdResultIngestionItem(NoPydanticValidation):
    id: uuid.UUID
    friendly_name: str
    active: bool


@dataclasses.dataclass
class WorkflowGetByIdResultNodeInstancesItemNode(NoPydanticValidation):
    id: uuid.UUID
    name: str
    version: int
    config: str
    base: str
    type: str | None


@dataclasses.dataclass
class WorkflowGetByIdResultNodeInstancesItemParentsItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class WorkflowGetByIdResultNodeInstancesItemWorkflow(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class WorkflowGetByIdResultNodeInstancesItem(NoPydanticValidation):
    id: uuid.UUID
    state: str
    parents: list[WorkflowGetByIdResultNodeInstancesItemParentsItem]
    children: list[WorkflowGetByIdResultNodeInstancesItemParentsItem]
    sequence: int | None
    depends: int
    depends_on: list[WorkflowGetByIdResultNodeInstancesItemParentsItem]
    required_state: list[str] | None
    config: str | None
    node: WorkflowGetByIdResultNodeInstancesItemNode
    workflow: WorkflowGetByIdResultNodeInstancesItemWorkflow


@dataclasses.dataclass
class WorkflowGetByIdResultStartRequirementsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    type: str
    default_value: str | None


@dataclasses.dataclass
class WorkflowGetByIdResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    version: int | None
    template: bool | None
    template_active: bool | None
    locations: str | None
    ingestion: list[WorkflowGetByIdResultIngestionItem]
    state: str
    flowstate: WorkflowGetByIdResultFlowstate | None
    start_requirements: list[WorkflowGetByIdResultStartRequirementsItem]
    node_instances: list[WorkflowGetByIdResultNodeInstancesItem]


async def workflow_get_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> WorkflowGetByIdResult | None:
    return await executor.query_single(
        """\
        select Workflow {
            id,
            name,
            version,
            template,
            template_active,
            locations,
            ingestion :{ friendly_name, active },

            state,
            flowstate :{ state, created, last_updated },
            start_requirements :{ name, type, default_value },

            node_instances :{
              state,
              parents,
              children,
              sequence,
              depends,
              depends_on,
              required_state,
              config,
              node :{
                name,
                version,
                config,
                base,
                type
              },
              workflow,
            },
        } filter .id = <uuid>$id;\
        """,
        id=id,
    )


class WorkflowGetById(pydantic.BaseModel):
    id: uuid.UUID
