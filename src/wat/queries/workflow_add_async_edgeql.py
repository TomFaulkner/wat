# AUTOGENERATED FROM 'queries/workflow_add.edgeql' WITH:
#     $ edgedb-py --target async


from __future__ import annotations

import dataclasses
import datetime
import uuid

import edgedb
import pydantic


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class WorkflowAddResultFlowstate(NoPydanticValidation):
    id: uuid.UUID
    state: str
    created: datetime.datetime | None
    last_updated: datetime.datetime | None


@dataclasses.dataclass
class WorkflowAddResultNodeInstancesItemNode(NoPydanticValidation):
    id: uuid.UUID
    name: str
    version: int
    config: str
    base: str
    type: str | None


@dataclasses.dataclass
class WorkflowAddResultNodeInstancesItemParentsItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class WorkflowAddResultNodeInstancesItemWorkflow(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class WorkflowAddResultNodeInstancesItem(NoPydanticValidation):
    id: uuid.UUID
    state: str
    parents: list[WorkflowAddResultNodeInstancesItemParentsItem]
    children: list[WorkflowAddResultNodeInstancesItemParentsItem]
    sequence: int | None
    depends: int
    depends_on: list[WorkflowAddResultNodeInstancesItemParentsItem]
    required_state: list[str] | None
    config: str | None
    node: WorkflowAddResultNodeInstancesItemNode
    workflow: WorkflowAddResultNodeInstancesItemWorkflow


@dataclasses.dataclass
class WorkflowAddResultStartRequirementsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    type: str
    default_value: str | None


@dataclasses.dataclass
class WorkflowAddResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    version: int | None
    template: bool | None
    locations: str | None
    template_active: bool | None
    state: str
    flowstate: WorkflowAddResultFlowstate | None
    start_requirements: list[WorkflowAddResultStartRequirementsItem]
    node_instances: list[WorkflowAddResultNodeInstancesItem]


async def workflow_add(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    version: int,
    locations: str,
    template: bool,
    template_active: bool,
    state: str,
    start_requirements: list[uuid.UUID],
) -> WorkflowAddResult:
    return await executor.query_single(
        """\
        with new_workflow := (
          insert Workflow {
            name := <str>$name,
            version := <int16>$version,
            locations := <std::json>$locations,
            template := <bool>$template,
            template_active := <bool>$template_active,
            state := <str>$state,
            flowstate := (
              insert FlowState {
                state := <json>'',
                created := datetime_current(),
                last_updated := datetime_current(),
              }
            ),
            start_requirements := (
              select detached StateAttributes
              filter .id in std::array_unpack(<array<uuid>>$start_requirements)
            )
          }
        )
        select new_workflow {
          id,
          name,
          version,
          template,
          locations,
          template_active,
          state,
          flowstate :{ state, created, last_updated },
          start_requirements :{ name, type, default_value },
          node_instances :{ state,
            parents,
            children,
            sequence,
            depends,
            depends_on,
            required_state,
            config,
            node :{
              name,
              version,
              config,
              base,
              type
            },
            workflow,
            },
        };\
        """,
        name=name,
        version=version,
        locations=locations,
        template=template,
        template_active=template_active,
        state=state,
        start_requirements=start_requirements,
    )


class WorkflowAdd(pydantic.BaseModel):
    name: str
    version: int
    locations: str
    template: bool
    template_active: bool
    state: str
    start_requirements: list[uuid.UUID]
