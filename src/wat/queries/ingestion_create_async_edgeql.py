# AUTOGENERATED FROM 'queries/ingestion_create.edgeql' WITH:
#     $ edgedb-py --target async


from __future__ import annotations

import dataclasses
import uuid

import edgedb
import pydantic


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class IngestionCreateResultWorkflow(NoPydanticValidation):
    id: uuid.UUID
    name: str | None


@dataclasses.dataclass
class IngestionCreateResult(NoPydanticValidation):
    id: uuid.UUID
    friendly_name: str
    workflow: IngestionCreateResultWorkflow
    active: bool


async def ingestion_create(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    wf_id: uuid.UUID,
    active: bool,
) -> IngestionCreateResult:
    return await executor.query_single(
        """\
        with new_ir := (
          insert IngestionRegistry {
            friendly_name := <str>$name,
            workflow := (
              select Workflow
                filter .id = <uuid>$wf_id
                and .template_active = true
              ),
            active := <bool>$active,
          }
        )
        select new_ir {
          friendly_name,
          workflow :{ id, name },
          active,
        }\
        """,
        name=name,
        wf_id=wf_id,
        active=active,
    )


class IngestionCreate(pydantic.BaseModel):
    name: str
    wf_id: uuid.UUID
    active: bool
